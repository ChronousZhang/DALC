1. 评委老师您好，这里是华录杯定向赛道跌倒检测赛题的ChrouousZ团队的代码。
2. 模型使用在COCO2017 person上训练的KeypointRCNN模型作为行人检测和关键点检测基准（检测bounding box的置信score低于0.8直接丢弃），同时使用一下4个tricks：
(1). 检测到行人的bounding box的宽 > 0.7* 高
(2). 检测行人的双跨关键点的中点 指向 双肩关键点的中点 的向量 和 双跨关键点的中点 指 向双膝关键点的中点 的向量的余弦值并转换为角度，角度大于80度
同时满足(1)(2)则认为是行人摔倒，仅满足(1)有可能是该人在弯腰扶别人，仅(2)会将近似直立行人误判为摔倒。
但以上条件过于强，会在人直接头脚颠倒的摔倒和肩跨膝关键点检测错误是进行误判，因此引入：
(3). 头的y坐标大于脚的y坐标则必为摔倒（和前两条的与条件结果 进行 "或" 操作）
(4). 对图像进行超分放大以追求更准确的行人检测和关键点回归任务。这里我们不使用直接缩放为固定大小，因为这样会扭曲行人的宽高，从而影响(1)条件的判断。
此外直接利用双线性插值将图像宽高等比例缩放也是一种超分的可替代方式，但性能会比超分略低，因为超分的结果更符合检测和回归的pixel-level任务。
具体情况可见PPT描述（图片在PPT上，而PPT详细说明在PPT的备注中）。
3. 代码运行：
(1). 进入SR路径，按照其下的“代码说明”文档对测试集图像进行4倍超分放大。
(2). 生成的超分图像放到当前目录下，路径格式为：
     |- SR
     |--- A
          | -- people(1).jpg
          | -- ...          
     |--- B
          | -- people(1).jpg
          | -- ...
(3). 运行python mean_std.py 可计算数据集的均值和方差，可在line 54修改需要计算均值和方差的数据集。
(4). 运行python fall_down_detection.py 可进行摔倒检测和写csv文件（需更新pytorch到最新版本）。
(5). 备注： coco_names.py中是COCO类别信息的dict，rescale.py可进行双线性插值的图像扩大， detect.py是获取PPT中检测图像的程序（由于提交内存限制，图像没有放在这里）。
      C3-Framework下是检测图像上行人数量的代码，若检测到图像上行人数量 > 20则直接设置摔倒行人数量为1，因为这更可能是一群人在围观。检测到的行人数量可以代替
      fall_down_detection.py的line 178中的count，我们的做法是先用C3-Framework检测到行人数量并写csv文件，然后在fall_down_detection.py中读取这个文件，得到行人数量
      来代替line 178中的count，这在A数据集上是有性能提升的，但在B数据集上没有使用，这是因为B阶段时间受限。
